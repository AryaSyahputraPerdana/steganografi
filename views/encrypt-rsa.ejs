<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>RSA Encryption & Decryption</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      display: flex;
      flex-direction: column;
      align-items: center;
      margin: 0;
      padding: 2rem;
      background-color: #f4f4f4;
      overflow-x: hidden;
    }
    canvas {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: -1;
    }
    .container {
      width: 100%;
      max-width: 600px;
      padding: 2rem;
      background-color: rgba(255, 255, 255, 0.85);
      border-radius: 10px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
      margin-bottom: 2rem;
    }
    h2 {
      text-align: center;
      color: #333;
    }
    label {
      font-weight: bold;
      margin-top: 1rem;
    }
    input, button, textarea {
      width: 100%;
      padding: 10px;
      margin-top: 5px;
      font-size: 16px;
      border-radius: 5px;
      border: 1px solid #ccc;
      box-sizing: border-box;
    }
    button {
      background-color: #007bff;
      color: white;
      border: none;
      cursor: pointer;
      font-size: 16px;
      margin-top: 1rem;
    }
    button:hover {
      background-color: #0056b3;
    }
    .output {
      font-size: 16px;
      margin-top: 1rem;
      word-wrap: break-word;
      white-space: pre-wrap;
    }

    .back-button {
      position: fixed;
      top: 20px;
      left: 20px;
      padding: 0.8rem 1.5rem;
      background-color: #007bff;
      color: white;
      text-decoration: none;
      border-radius: 5px;
      font-size: 1.3rem;
      font-weight: bold;
      text-align: center;
      transition: background-color 0.3s;
      z-index: 10; /* Pastikan tombol berada di atas elemen lain */
    }

    .back-button:hover {
      background-color: #0056b3;
    }
  </style>
</head>
<body>

  <!-- Canvas untuk Three.js -->
  <canvas id="bg"></canvas>

  <a href="/dashboard" class="back-button">‚Üê Kembali ke Dashboard</a>

  <div class="container">
    <h2>RSA Key Generation & Encryption</h2>
    <button onclick="generateKeys()">Generate RSA Keys</button>
    <div id="keys" class="output"></div>
  </div>

  <div class="container">
    <h2>Encrypt Text</h2>
    <label for="plaintext">Plaintext:</label>
    <textarea id="plaintext" rows="3" placeholder="Enter text to encrypt"></textarea>
    <button onclick="encryptText()">Encrypt</button>
    <div id="encryptedText" class="output"></div>
  </div>

  <div class="container">
    <h2>Decrypt Text</h2>
    <label for="ciphertext">Ciphertext:</label>
    <textarea id="ciphertext" rows="3" placeholder="Enter encrypted text to decrypt"></textarea>
    <button onclick="decryptText()">Decrypt</button>
    <div id="decryptedText" class="output"></div>
  </div>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
  <script>
    let publicKey = {};
    let privateKey = {};
    let p, q, n, m, e, d;

    function gcd(a, b) {
      while (b !== 0) {
        const temp = b;
        b = a % b;
        a = temp;
      }
      return a;
    }

    function findE(m) {
      let e = 2;
      while (e < m && gcd(e, m) !== 1) {
        e++;
      }
      return e;
    }

    function modInverse(e, m) {
      let d = 1;
      while ((e * d) % m !== 1) {
        d++;
      }
      return d;
    }

    function generateKeys() {
      const primes = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31];
      p = primes[Math.floor(Math.random() * primes.length)];
      q = primes[Math.floor(Math.random() * primes.length)];

      n = p * q;
      m = (p - 1) * (q - 1);
      e = findE(m);
      d = modInverse(e, m);

      publicKey = { e, n };
      privateKey = { d, n };

      document.getElementById("keys").textContent = 
        `Perhitungan Key RSA:\n` +
        `1. bilangan prima:   p = ${p}, q = ${q}\n` +
        `2. Hitung n = p * q:   n = ${n}\n` +
        `3. Hitung m = (p - 1) * (q - 1):   m = ${m}\n` +
        `4. Pilih e, kunci publik yang relatif prima dengan m:   e = ${e}\n` +
        `5. Hitung d, kunci privat sebagai invers dari e mod m:   d = ${d}\n\n` +
        `Public Key: (${e}, ${n})\nPrivate Key: (${d}, ${n})`;
    }

    function modPow(base, exp, mod) {
      let result = 1;
      base = base % mod;
      while (exp > 0) {
        if (exp % 2 === 1) result = (result * base) % mod;
        exp = Math.floor(exp / 2);
        base = (base * base) % mod;
      }
      return result;
    }

    function encryptText() {
      const plaintext = document.getElementById("plaintext").value;
      if (!publicKey.e || !publicKey.n) {
        alert("Please generate RSA keys first!");
        return;
      }
      const encrypted = plaintext.split("").map(char => {
        return modPow(char.charCodeAt(0), publicKey.e, publicKey.n);
      });
      document.getElementById("encryptedText").textContent = `Encrypted Text: ${encrypted.join(", ")}`;
      document.getElementById("ciphertext").value = encrypted.join(", ");
    }

    function decryptText() {
      const ciphertext = document.getElementById("ciphertext").value.split(", ").map(Number);
      if (!privateKey.d || !privateKey.n) {
        alert("Please generate RSA keys first!");
        return;
      }
      const decrypted = ciphertext.map(charCode => {
        return String.fromCharCode(modPow(charCode, privateKey.d, privateKey.n));
      }).join("");
      document.getElementById("decryptedText").textContent = `Decrypted Text: ${decrypted}`;
    }

    // Three.js animation setup
    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    const renderer = new THREE.WebGLRenderer({ canvas: document.getElementById('bg'), antialias: true });
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.setPixelRatio(window.devicePixelRatio);

    function addStar() {
      const geometry = new THREE.SphereGeometry(0.1, 24, 24);
      const material = new THREE.MeshBasicMaterial({ color: 0xffffff });
      const star = new THREE.Mesh(geometry, material);

      const [x, y, z] = Array(3).fill().map(() => THREE.MathUtils.randFloatSpread(500));
      star.position.set(x, y, z);
      scene.add(star);
    }

    Array(500).fill().forEach(addStar);

    function animate() {
      requestAnimationFrame(animate);
      scene.rotation.x += 0.0005;
      scene.rotation.y += 0.0005;
      renderer.render(scene, camera);
    }

    animate();

    window.addEventListener('resize', () => {
      renderer.setSize(window.innerWidth, window.innerHeight);
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
    });

    camera.position.z = 200;
  </script>

</body>
</html>
