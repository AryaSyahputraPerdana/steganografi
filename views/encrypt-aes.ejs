<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>AES Encryption</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 0;
      background-color: #f4f4f4;
      overflow-x: hidden;
    }

    canvas {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: -1;
    }

    .container {
      position: relative;
      width: 80%;
      margin: 2rem auto;
      padding: 2rem;
      background-color: rgba(255, 255, 255, 0.6);
      border-radius: 10px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
      z-index: 1;
    }

    h2 {
      text-align: center;
      margin-bottom: 1.5rem;
      font-size: 2.2rem;
    }

    label {
      display: block;
      margin-bottom: 0.5rem;
      font-weight: bold;
      font-size: 1.2rem;
    }

    input, select, textarea, button {
      width: 100%;
      padding: 1rem;
      margin-bottom: 1rem;
      border-radius: 5px;
      border: 1px solid #ccc;
      font-size: 1.1rem;
    }

    button {
      background-color: #007bff;
      color: white;
      border: none;
      cursor: pointer;
      font-size: 1.3rem;
      padding: 1rem;
    }

    button:hover {
      background-color: #0056b3;
    }

    .output {
      background-color: #e0e0e0;
      padding: 1rem;
      margin-top: 1.5rem;
      border-radius: 5px;
      word-wrap: break-word;
      font-size: 1.2rem;
    }

    .error {
      font-weight: bold;
      font-size: 1.1rem;
      margin-bottom: 1rem;
    }

    .error.red {
      color: red;
    }
    .error.green {
      color: green;
    }

    .back-button {
      position: fixed;
      top: 20px;
      left: 20px;
      padding: 0.8rem 1.5rem;
      background-color: #007bff;
      color: white;
      text-decoration: none;
      border-radius: 5px;
      font-size: 1.3rem;
      font-weight: bold;
      text-align: center;
      transition: background-color 0.3s;
      z-index: 10; /* Pastikan tombol berada di atas elemen lain */
    }

    .back-button:hover {
      background-color: #0056b3;
    }
  </style>
</head>
<body>

  <!-- Canvas untuk Three.js -->
  <canvas id="bg"></canvas>

  <!-- Tombol Kembali ke Dashboard -->
  <a href="/dashboard" class="back-button">‚Üê Kembali ke Dashboard</a>

  <div class="container">
    <h2>Enkripsi Teks - AES</h2>

    <% if (errorMessage) { %>
      <div class="error red"><%= errorMessage %></div>
    <% } %>

    <!-- Card Enkripsi -->
    <div class="container">
      <h3>Form Enkripsi</h3>
      <form action="/encrypt-aes" method="POST">
        <label for="encrypt-text">Masukkan Teks yang Ingin Dienkripsi:</label>
        <textarea id="encrypt-text" name="text" rows="4" placeholder="Masukkan teks..." required></textarea>

        <label for="encrypt-key">Masukkan Kunci (16, 24, atau 32 karakter):</label>
        <input type="text" id="encrypt-key" name="key" placeholder="Masukkan kunci..." required oninput="validateKeyLength('encrypt')">
        <p id="encrypt-key-warning" class="error red" style="display: none;"></p>

        <label for="key-size">Pilih Ukuran Kunci:</label>
        <select id="key-size" name="keySize" required onchange="validateKeyLength('encrypt')">
          <option value="128">128-bit (16 karakter)</option>
          <option value="192">192-bit (24 karakter)</option>
          <option value="256">256-bit (32 karakter)</option>
        </select>

        <button type="submit" name="action" value="encrypt">Enkripsi Teks</button>
      </form>

      <% if (encryptedText) { %>
        <div>
          <p>Hasil Enkripsi:</p>
          <div class="output"><%= encryptedText %></div>
        </div>
      <% } %>
    </div>

    <!-- Card Dekripsi -->
    <div class="container" style="margin-top: 2rem;">
      <h3>Form Dekripsi</h3>
      <form action="/encrypt-aes" method="POST">
        <label for="decrypt-text">Masukkan Teks yang Ingin Didekripsi:</label>
        <textarea id="decrypt-text" name="text" rows="4" placeholder="Masukkan teks terenkripsi..." required></textarea>

        <label for="decrypt-key">Masukkan Kunci (16, 24, atau 32 karakter):</label>
        <input type="text" id="decrypt-key" name="key" placeholder="Masukkan kunci..." required oninput="validateKeyLength('decrypt')">
        <p id="decrypt-key-warning" class="error red" style="display: none;"></p>

        <label for="key-size-decrypt">Pilih Ukuran Kunci:</label>
        <select id="key-size-decrypt" name="keySize" required onchange="validateKeyLength('decrypt')">
          <option value="128">128-bit (16 karakter)</option>
          <option value="192">192-bit (24 karakter)</option>
          <option value="256">256-bit (32 karakter)</option>
        </select>

        <button type="submit" name="action" value="decrypt">Dekripsi Teks</button>
      </form>

      <% if (decryptedText) { %>
        <div>
          <p>Hasil Dekripsi:</p>
          <div class="output"><%= decryptedText %></div>
        </div>
      <% } %>
    </div>
  </div>

  <!-- Three.js Animation -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
  <script>
    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    const renderer = new THREE.WebGLRenderer({ canvas: document.getElementById('bg'), antialias: true });
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.setPixelRatio(window.devicePixelRatio);

    function addStar() {
      const geometry = new THREE.SphereGeometry(0.1, 24, 24);
      const material = new THREE.MeshBasicMaterial({ color: 0xffffff });
      const star = new THREE.Mesh(geometry, material);

      const [x, y, z] = Array(3).fill().map(() => THREE.MathUtils.randFloatSpread(500));
      star.position.set(x, y, z);
      scene.add(star);
    }

    Array(500).fill().forEach(addStar);

    function animate() {
      requestAnimationFrame(animate);
      scene.rotation.x += 0.0005;
      scene.rotation.y += 0.0005;
      renderer.render(scene, camera);
    }

    animate();
    
    window.addEventListener('resize', () => {
        renderer.setSize(window.innerWidth, window.innerHeight);
        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();
    });

    camera.position.z = 200;

    function validateKeyLength(type) {
      const keyInput = document.getElementById(type + '-key');
      const keySizeSelect = document.getElementById(type === 'encrypt' ? 'key-size' : 'key-size-decrypt');
      const warningMessage = document.getElementById(type + '-key-warning');

      const requiredLength = parseInt(keySizeSelect.value) === 128 ? 16 : parseInt(keySizeSelect.value) === 192 ? 24 : 32;
      
      if (keyInput.value.length !== requiredLength) {
        warningMessage.textContent = `Kunci harus memiliki ${requiredLength} karakter. Saat ini: ${keyInput.value.length}`;
        warningMessage.classList.remove('green');
        warningMessage.classList.add('red');
        warningMessage.style.display = 'block';
      } else {
        warningMessage.textContent = `Panjang kunci sesuai (${requiredLength} karakter)`;
        warningMessage.classList.remove('red');
        warningMessage.classList.add('green');
        warningMessage.style.display = 'block';
      }
    }
  </script>

</body>
</html>
